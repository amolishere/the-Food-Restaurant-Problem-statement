The WITH query provides a way to write auxiliary statements for use in a larger query. 
It helps in breaking down complicated and large queries into simpler forms, which are easily readable. 
These statements often referred to as Common Table Expressions or CTEs, can be thought of as defining temporary tables that exist just for one query.


Syntax:
WITH
   name_for_summary_data AS (
      SELECT Statement)
   SELECT columns
   FROM name_for_summary_data
   WHERE conditions <=> (
      SELECT column
      FROM name_for_summary_data)
   [ORDER BY columns]


9) If each $1 spent equates to 10 points and Pizza has a 2x points multiplier - how many points would each customer have?

WITH points_table AS
(
SELECT customer_id,product_id,
    CASE 
    	  WHEN product_id = 1 THEN 20
    	  WHEN product_id = 2 THEN 15
        WHEN product_id = 3 THEN 12
    END AS points
FROM sales
)

SELECT customer_id,
SUM(points) AS total_points
FROM points_table
GROUP BY customer_id;



--10) In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just pizza - how many points do customer A and B have at the end of January?

WITH dates_cte AS 
(
 SELECT *, 
  DATEADD(DAY, 6, join_date) AS valid_date, 
  EOMONTH('2021-01-31') AS last_date
 FROM members AS m
)

SELECT d.customer_id, s.order_date, d.join_date, 
 d.valid_date, d.last_date, m.product_name, m.price,
 SUM(CASE
  WHEN m.product_name = 'sushi' THEN 2 * 10 * m.price
  WHEN s.order_date BETWEEN d.join_date AND d.valid_date THEN 2 * 10 * m.price
  ELSE 10 * m.price
  END) AS points
FROM dates_cte AS d
JOIN sales AS s
 ON d.customer_id = s.customer_id
JOIN menu AS m
 ON s.product_id = m.product_id
WHERE s.order_date < d.last_date
GROUP BY d.customer_id, s.order_date, d.join_date, d.valid_date, d.last_date, m.product_name, m.price
